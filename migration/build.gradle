apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'
    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
        }
        release {
            debuggable false
        }
    }
    productFlavors {
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        textReport true
        textOutput 'stdout'
        disable 'GoogleAppIndexingWarning'
        disable 'InvalidPackage' // java.nio.file in ANLR4
    }
    dexOptions {
        preDexLibraries = !System.getenv("CI")
    }
}

final PACKAGE = 'com.github.gfx.android.orma.migration.sqliteparser.g'
final PACKAGE_PATH = PACKAGE.replaceAll(/\./, '/')
final GRAMMAR_FILE = project.file("src/main/antlr/SQLite.g4")
final ANTLR_TEMP_DIR = "$buildDir/tmp/antlr"
final ANTLR_OUTPUT_DIR = "$buildDir/generated/source/antlr"

configurations {
    antlr
}

android.sourceSets.main.java.srcDir ANTLR_OUTPUT_DIR

task generateParserSources(type: JavaExec) {
    description = 'Generate SQLiteParser sources with ANTLR4'
    main = 'org.antlr.v4.Tool'

    // See https://github.com/antlr/antlr4/blob/master/doc/tool-options.md for details
    args = [GRAMMAR_FILE, '-o', "$ANTLR_TEMP_DIR/$PACKAGE_PATH", '-package', PACKAGE, '-Werror', '-long-messages']
    classpath = configurations.antlr

    // inputs and outputs are necessary for incremental build in ad-hoc task
    // https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_input_output_runtime_api
    inputs.files GRAMMAR_FILE
    outputs.dir "$ANTLR_OUTPUT_DIR/$PACKAGE_PATH"

    doLast {
        fileTree(dir: "$ANTLR_TEMP_DIR/$PACKAGE_PATH", include: '*.java').each { File srcFile ->
            File dstFile = new File(ANTLR_OUTPUT_DIR, srcFile.absolutePath.substring(ANTLR_TEMP_DIR.length()))
            if (!dstFile.exists() || dstFile.bytes != srcFile.bytes) {
                dstFile.parentFile.mkdirs()
                srcFile.renameTo(dstFile)
                dstFile.setLastModified(GRAMMAR_FILE.lastModified())
            }
        }
    }
}

tasks.preBuild.dependsOn(generateParserSources)

task updateSqliteGrammar(type: Exec) {
    final url = "https://raw.githubusercontent.com/bkiers/sqlite-parser/master/src/main/antlr4/nl/bigo/sqliteparser/SQLite.g4"
    commandLine "curl", "-L", url, "-o", GRAMMAR_FILE
}

dependencies {
    antlr 'org.antlr:antlr4:4.7'
    compile('org.antlr:antlr4-runtime:4.7')
    compile "com.android.support:support-annotations:${SUPPORT_LIBRARY_VERSION}"
    testCompile 'com.github.gfx.android.robolectricinstrumentation:robolectric-instrumentation:3.1.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
}

publish {
    artifactId = 'orma-migration'
    desc = 'A smart SQLiteDatabase migration engine'

    def metadata = rootProject.ext.metadata
    groupId = metadata.groupId
    publishVersion = metadata.version
    website = metadata.website
    repository = metadata.repository
    licences = metadata.licences
}
